<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>main_menu = ds_list_create();
ds_list_add(main_menu,
    scr_menu_item("New", scr_menu_new),
    scr_menu_item("Continue", scr_menu_continue),
    scr_menu_item("Options", scr_menu_options),
    scr_menu_item("Control Config", scr_menu_controls),
    scr_menu_item("Quit", scr_menu_quit)
);

options_menu = ds_list_create();
ds_list_add(options_menu,
    scr_menu_item_ext("Fullscreen", scr_menu_fullscreen, scr_addon_fullscreen),
    scr_menu_item_ext("Sound", scr_menu_sound, scr_addon_sound),
    scr_menu_item_ext("Music", scr_menu_music, scr_addon_music),
    scr_menu_item("Back", scr_menu_back)
);

controls_menu = ds_list_create();
ds_list_add(controls_menu,
    scr_menu_item("Keyboard", scr_menu_keyboard),
    scr_menu_item("Gamepad", scr_menu_gamepad),
    scr_menu_item("Back", scr_menu_back)
);
 
keyboard_menu = ds_list_create();
ds_list_add(keyboard_menu,
    scr_menu_item_ext2("Move Left", scr_menu_keyboard_bind, scr_addon_keyboard, obj_controller.left),
    scr_menu_item_ext2("Move Right", scr_menu_keyboard_bind, scr_addon_keyboard, obj_controller.right),
    scr_menu_item_ext2("Jump", scr_menu_keyboard_bind, scr_addon_keyboard, obj_controller.jump),
    scr_menu_item_ext2("Attack", scr_menu_keyboard_bind, scr_addon_keyboard, obj_controller.attack),
    scr_menu_item_ext2("Dive/Launch", scr_menu_keyboard_bind, scr_addon_keyboard, obj_controller.dive),
    scr_menu_item("Back", scr_menu_back)
);

gamepad_menu = ds_list_create();
ds_list_add(gamepad_menu,
    scr_menu_item_ext2("Move Left (Alt)", scr_menu_gamepad_bind, scr_addon_gamepad, obj_controller.left),
    scr_menu_item_ext2("Move Right (Alt)", scr_menu_gamepad_bind, scr_addon_gamepad, obj_controller.right),
    scr_menu_item_ext2("Jump", scr_menu_gamepad_bind, scr_addon_gamepad, obj_controller.jump),
    scr_menu_item_ext2("Attack", scr_menu_gamepad_bind, scr_addon_gamepad, obj_controller.attack),
    scr_menu_item_ext2("Dive/Launch", scr_menu_gamepad_bind, scr_addon_gamepad, obj_controller.dive),
    scr_menu_item("Back", scr_menu_back)
);

current_menu = main_menu;
menu_stack = ds_stack_create();

selected = 0;

gamepad_labels = scr_generate_gamepad_labels();
keyboard_labels = scr_generate_key_labels();

to_bind = -1;
bind_name = "";
error_text = "";
error_time = 0;

base_state = 0;
keyboard_state = 1;
gamepad_state = 2;

state = base_state;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (state) {
    case base_state:
        if (obj_controller.up_pressed) {
            audio_play_sound(snd_select, 0, false);
            selected--;
            if (selected &lt; 0) {
                selected = ds_list_size(current_menu) - 1;
            }
        }
        if (obj_controller.down_pressed) {
            audio_play_sound(snd_select, 0, false);
            selected++;
            if (selected &gt; ds_list_size(current_menu) - 1) {
                selected = 0;
            }
        }
        if (obj_controller.confirm_pressed) {
            audio_play_sound(snd_confirm, 0, false);
            var selection = current_menu[| selected];
            if (array_length_1d(selection) &gt; 3) {
                script_execute(selection[1], selection[0], selection[3]);
            }
            else {
                script_execute(selection[1]);
            }
        }
        if (obj_controller.cancel_pressed) {
            if (current_menu == main_menu) {
                game_end();
            }
            else {
                audio_play_sound(snd_cancel, 0, false);
                scr_menu_back();
            }
        }
        
        break;
    case keyboard_state:
        if (keyboard_check_pressed(vk_anykey)) {
            var key = keyboard_key;
            var supported = true;
            
            if (is_undefined(ds_map_find_value(keyboard_labels, key))) {
                supported = false
                error_text = "Key is not supported";
            }
            else { 
                error_text = "Key is already in use";
                
                var current_key = ds_map_find_first(obj_controller.keys);
                while (supported &amp;&amp; !is_undefined(ds_map_find_next(obj_controller.keys, current_key))) {
                    if (ds_map_find_value(obj_controller.keys, current_key) == key) {
                        supported = false;
                    }
                    current_key = ds_map_find_next(obj_controller.keys, current_key);
                }
            }
            
            if (supported) {
                audio_play_sound(snd_confirm, 0, false);
                ds_map_replace(obj_controller.keys, to_bind, key);
                state = base_state;
            }
            else {
                audio_play_sound(snd_error, 0, false);
                error_time = 120;
            }
        }
        
        break;
    case gamepad_state:
        var button = scr_check_gamepad_buttons();
        
        if (!is_undefined(button)) {
            var supported = true;
            error_text = "Button is already in use";
                
            var current_key = ds_map_find_first(obj_controller.buttons);
            while (supported &amp;&amp; !is_undefined(ds_map_find_next(obj_controller.buttons, current_key))) {
                if (!(
                    current_key == obj_controller.confirm || 
                    current_key == obj_controller.up ||
                    current_key == obj_controller.down
                    )) {
                    if (ds_map_find_value(obj_controller.buttons, current_key) == button) {
                        supported = false;
                    }
                }
                current_key = ds_map_find_next(obj_controller.buttons, current_key);
            }
            
            if (supported) {
                audio_play_sound(snd_confirm, 0, false);
                ds_map_replace(obj_controller.buttons, to_bind, button);
                state = base_state;
            }
            else {
                audio_play_sound(snd_error, 0, false);
                error_time = 120;
            }
        }
    
        break;
}

if (state != base_state &amp;&amp; obj_controller.cancel_pressed) {
    audio_stop_sound(snd_error);
    audio_play_sound(snd_cancel, 0, false);
    state = base_state;
}

if (error_time &gt; 0) {
    error_time--;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_center);
draw_set_valign(fa_middle);

draw_set_color(make_color_rgb(203, 44, 14));
draw_set_font(fnt_title);

draw_text(room_width / 2, room_height / 4, "Corruption");

draw_set_color(c_white);
draw_set_font(fnt_option);

for (var i = 0; i &lt; ds_list_size(current_menu); i++) {
    var selection = current_menu[| i];
    var addon = "";
    if (array_length_1d(selection) &gt; 3) {
        addon = script_execute(selection[2], selection[3]);
    }
    else {
        addon = script_execute(selection[2]);
    }
    var text = selection[0] + addon;
    if (i == selected) {
        text = "&gt; " + text + " &lt;";
    }
    draw_text(room_width / 2, room_height / 2 + i * 24, text);
}

if (state != base_state) {
    draw_set_alpha(0.75);
    draw_set_color(c_black);
    
    draw_rectangle(0, 0, room_width, room_height, false);
    
    draw_set_alpha(1);
    draw_set_color(c_white);
    
    var type = "key";
    var cancel = "Escape";
    if (state == gamepad_state) {
        type = "button";
        cancel = "Start (or Escape)";
    }
    
    draw_text(room_width / 2, room_height / 5, "Press new " + bind_name + " " + type);
    draw_text(room_width / 2, room_height * (4 / 5), "Press " + cancel + " to cancel");
    
    if (error_time &gt; 0) {
        draw_set_color(c_red);
        draw_text(room_width / 2, room_height / 2, error_text);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
