<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>stand_list = ds_list_create();
ds_list_add(stand_list, spr_player_stand, spr_player_stand_1, spr_player_stand_2, spr_player_stand_3, spr_player_stand_4, spr_player_stand_5);
jump_list = ds_list_create();
ds_list_add(jump_list, spr_player_jump, spr_player_jump_1, spr_player_jump_2, spr_player_jump_3, spr_player_jump_4, spr_player_jump_5);
fall_list = ds_list_create();
ds_list_add(fall_list, spr_player_fall, spr_player_fall_1, spr_player_fall_2, spr_player_fall_3, spr_player_fall_4, spr_player_fall_5);
run_list = ds_list_create();
ds_list_add(run_list, spr_player_run, spr_player_run_1, spr_player_run_2, spr_player_run_3, spr_player_run_4, spr_player_run_5);
attack_list = ds_list_create();
ds_list_add(attack_list, spr_player_attack_1, spr_player_attack_1, spr_player_attack_2, spr_player_attack_3, spr_player_attack_4, spr_player_attack_5);
dive_list = ds_list_create();
ds_list_add(dive_list, spr_player_dive_3, spr_player_dive_3, spr_player_dive_3, spr_player_dive_3, spr_player_dive_4, spr_player_dive_5);
launch_list = ds_list_create();
ds_list_add(launch_list, spr_player_launch_5, spr_player_launch_5, spr_player_launch_5, spr_player_launch_5, spr_player_launch_5, spr_player_launch_5);

jump_speed = -4.1;//-5.1;//-6;
double_jump_speed = -3.1;//-4.1;//-5;
grav = 0.25;
x_speed_max = 3;
run_needed = 30;
launch_speed = -8;
base_state = 0;
attack_state = 1;
post_attack_state = 2;
dive_charge_state = 3;
dive_state = 4;
launch_charge_state = 5;
launch_state = 6;
jump_buffer = 6;

timer = 0;
state = base_state;
double_jump = false;
x_speed = 0;
y_speed = 0;
sprite = spr_player_stand;
facing = 1;
frame = 0;
attack = 0;
run = 0;
knockback = false;
inv = 0;
flash = true;
can_dive = true;
can_jump = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (obj_control.state == base_state) {
    if (inv &gt; 0)
        inv--;
    flash = !flash;
    
    switch (state) {
        case base_state:
            if (obj_controller.left_held) {
                x_speed -= 0.5;
            }
            if (obj_controller.right_held) {
                x_speed += 0.5;
            }
            if (x_speed != 0) {
                facing = sign(x_speed);
                x_speed -= 0.25 * sign(x_speed);
            }
            if (run &lt; run_needed) {
                if (abs(x_speed) &gt; x_speed_max) {
                    if (!place_free(x, y + 1)) {
                        if (obj_control.ability &gt;= 4) {
                            run++;
                            if (run &gt;= run_needed) {
                                audio_play_sound(snd_run, 0, false);
                            }
                        }
                    }
                    else {
                        run = 0;
                    }
                    x_speed = sign(x_speed) * x_speed_max;
                }
                else {
                    run = 0;
                }
            }
            else {
                if (abs(x_speed) &lt; x_speed_max) {
                    run = 0;
                }
                else if (abs(x_speed) &gt; x_speed_max * 2) {
                    x_speed = sign(x_speed) * x_speed_max * 2;
                }
            }
            
            
            if (place_free(x, y + 1)) {
                y_speed += grav;
            }
            else {
                if (obj_control.ability &gt;= 2) {
                    double_jump = true;
                }
                can_jump = jump_buffer;
            }
            if (y_speed &lt; 0 &amp;&amp; obj_controller.jump_released) {
                y_speed /= 2;
            }
            if (y_speed &gt; 8) {
                y_speed = 8;
            }
            if (y_speed &gt;= 0) {
                can_dive = true;
            }
            
            if (obj_controller.jump_pressed) {
                if (can_jump &gt; 0) {
                    audio_play_sound(snd_jump, 0, false);
                    y_speed = jump_speed;
                } 
                else if (double_jump) {
                    audio_play_sound(snd_flap, 0, false);
                    y_speed = double_jump_speed;
                    double_jump = false;
                }
            }
            
            if (can_jump &gt; 0) {
                can_jump--;
            }
            
            var x_move = round(x_speed);
            
            if (place_free(x + x_move, y)) {
                x += x_move;
            }
            else {
                move_contact_solid(point_direction(0, 0, x_move, 0), abs(x_move));
                x_speed = 0;
            }
            
            if (obj_controller.attack_pressed) {
                if (obj_control.ability &gt;= 1) {
                    audio_play_sound(snd_attack, 0, false);
                    state = attack_state;
                    knockback = false;
                    timer = 4;
                    x_speed = 0;
                    if (y_speed &lt; 0) {
                        y_speed = 0;
                    }
                }
            }
            else if (obj_controller.dive_pressed) {
                if (place_free(x, y + 1)) {
                    if (obj_control.ability &gt;= 3 &amp;&amp; can_dive) {
                        state = dive_charge_state;
                        timer = 5;
                        x_speed = 0;
                        can_dive = false;
                    }
                }
                else {
                    if (obj_control.ability &gt;= 5) {
                        state = launch_charge_state;
                        timer = 10;
                        x_speed = 0;
                    }
                }
            }
            
            var y_move = round(y_speed);
            
            if (place_free(x, y + y_move)) {
                y += y_move;
            }
            else {
                if (y_speed &gt; 0) {
                    audio_play_sound(snd_land, 0, false);
                }
                move_contact_solid(point_direction(0, 0, 0, y_move), abs(y_move));
                y_speed = 0;
            }
            
            break;
        case attack_state:
            with (obj_rock) {
                solid = false;
            }
            
            var enemy = instance_place(x + 8 * facing, y, obj_enemy);
        
            if (place_free(x + 8 * facing, y) &amp;&amp; enemy == noone) {
                x += 8 * facing;
            }
            else {
                if (enemy == noone) {
                    move_contact_solid(point_direction(0, 0, facing, 0), 8);
                }
                else {
                    if (place_free(x, y + 1)) {
                        y_speed = -1.25;
                    }
                    with (enemy){
                        event_user(0);
                    }
                }
                knockback = true;
                timer = 6;
                state = post_attack_state;
            }
            
            with (obj_rock) {
                solid = true;
            }
            
            timer--;
            if (timer &lt;= 0) {
                timer = 6;
                state = post_attack_state;
            }
            
            break;
        case post_attack_state:
            if (knockback) {
                if (place_free(x - facing * 2, y)) {
                    x -= facing * 2;
                }
            }
        
            if (place_free(x, y + 1)) {
                y_speed += grav;
            }
            
            var y_move = round(y_speed);
            
            if (place_free(x, y + y_move)) {
                y += y_move;
            }
            else {
                move_contact_solid(point_direction(0, 0, 0, y_move), abs(y_move));
                y_speed = 0;
            }
        
            timer--;
            if (timer &lt;= 0) {
                attack = !attack;
                state = base_state;
            }
            
            break;
        case dive_charge_state:
            timer--;
            if (timer &lt;= 0) {
                audio_play_sound(snd_dive, 0, false);
                state = dive_state;
            }
            
            break;
        case dive_state:
            with (obj_rock) {
                solid = false;
            }
            
            var enemy = instance_place(x, y + 12, obj_enemy);
        
            if (place_free(x, y + 12) &amp;&amp; enemy == noone) {
                y += 12;
            }
            else {
                audio_play_sound(snd_dive_end, 0, false);
                if (enemy == noone) {
                    move_contact_solid(270, 12);
                }
                else with (enemy) {
                    instance_destroy();//event_user(0);
                }
                y_speed = double_jump_speed;
                state = base_state;
            }
            
            with (obj_rock) {
                solid = true;
            }
            
            break;
        case launch_charge_state:
            timer--;
            if (timer &lt;= 0) {
                audio_play_sound(snd_launch, 0, false);
                state = launch_state;
                timer = 10;
            }
            
            break;
        case launch_state:
            with (obj_rock) {
                solid = false;
            }
            
            var enemy = instance_place(x, y + launch_speed, obj_enemy);
            if (enemy != noone) {
                with (enemy) {
                    instance_destroy();
                }
            }
        
            if (place_free(x, y + launch_speed)) {
                y += launch_speed;
            }
            else {
                move_contact_solid(90, abs(launch_speed));
                state = base_state;
            }
            
            with (obj_rock) {
                solid = true;
            }
            
            timer--;
            if (timer &lt;= 0) {
                y_speed = -3;
                state = base_state;
            }
            
            break;
    }
    
    
    //ANFIMATIn
    
    if (state == attack_state || state == post_attack_state) {
        sprite = ds_list_find_value(attack_list, obj_control.ability);
        frame = attack;
    }
    else if (state == dive_state || state = dive_charge_state) {
        sprite = ds_list_find_value(dive_list, obj_control.ability);
    }
    else if (state == launch_state || state = launch_charge_state) {
        sprite = ds_list_find_value(launch_list, obj_control.ability);
    }
    else if (place_free(x, y + 1)) {
        if (y_speed &lt; 0) {
            sprite = ds_list_find_value(jump_list, obj_control.ability);
        } 
        else {
            sprite = ds_list_find_value(fall_list, obj_control.ability);
        }
    }
    else {
        if (abs(x_speed) &lt; 1) {
            sprite = ds_list_find_value(stand_list, obj_control.ability);
        }
        else {
            var can_step = (frame &lt; 4);
            frame += abs(x_move) / 16;
            if (frame &gt;= 8) {
                audio_play_sound(snd_step, 0, false);
                frame -= 8;
            }
            else if (frame &gt;= 4 &amp;&amp; can_step) {
                audio_play_sound(snd_step, 0, false);
            }
            sprite = ds_list_find_value(run_list, obj_control.ability);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_save">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (other.can_save) {
    audio_play_sound(snd_save, 0, false);
    obj_control.hp = 6 - obj_control.ability;
    with (obj_control) {
        scr_save();
    }
    other.can_save = false;
    instance_create(other.x, other.y, obj_saved);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (abs(x_speed) &gt; x_speed_max) {
    with (other) {
        instance_destroy();
    }
}
else if (other.stagger &lt;= 0 &amp;&amp; inv &lt;= 0 &amp;&amp; state == base_state) {
    audio_play_sound(snd_hit, 0, false);
    obj_control.hp--;
    inv = 60;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (inv &lt;= 0 || flash) {
    draw_sprite_ext(sprite, frame, x, y, facing, 1, 0, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
