<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i = 0;
left = i++;
right = i++;
jump = i++;
attack = i++;
dive = i++;
up = i++;
down = i++;
confirm = i++;
cancel = i++;

ini_open("corruption_data");

keys = ds_map_create();
ds_map_add(keys, left, ini_read_real("keyboard", "key" + string(left), vk_left));
ds_map_add(keys, right, ini_read_real("keyboard", "key" + string(right), vk_right));
ds_map_add(keys, jump, ini_read_real("keyboard", "key" + string(jump), vk_up));
ds_map_add(keys, attack, ini_read_real("keyboard", "key" + string(attack), ord('A')));
ds_map_add(keys, dive, ini_read_real("keyboard", "key" + string(dive), ord('S')));
/*ds_map_add(keys, up, vk_up);
ds_map_add(keys, down, vk_down);
ds_map_add(keys, confirm, ord('A'));
ds_map_add(keys, cancel, vk_escape);*/

buttons = ds_map_create();
ds_map_add(buttons, left, ini_read_real("gamepad", "button" + string(left), gp_padl));
ds_map_add(buttons, right, ini_read_real("gamepad", "button" + string(right), gp_padr));
ds_map_add(buttons, jump, ini_read_real("gamepad", "button" + string(jump), gp_face1));
ds_map_add(buttons, attack, ini_read_real("gamepad", "button" + string(attack), gp_face3));
ds_map_add(buttons, dive, ini_read_real("gamepad", "button" + string(dive), gp_face2));
/*ds_map_add(buttons, up, gp_padu);
ds_map_add(buttons, down, gp_padd);
ds_map_add(buttons, confirm, gp_face1);
ds_map_add(buttons, cancel, gp_start);*/

left_held = false;
right_held = false;
jump_pressed = false;
jump_released = false;
attack_pressed = false;
dive_pressed = false;
up_pressed = false;
down_pressed = false;
confirm_pressed = false;
cancel_pressed = false;

gamepad_labels = scr_generate_gamepad_labels();
keyboard_labels = scr_generate_key_labels();

gamepad_set_axis_deadzone(0, 0.3);

leftstick_up_held = gamepad_axis_value(0, gp_axislv) &lt; 0;
leftstick_down_held = gamepad_axis_value(0, gp_axislv) &lt; 0;

gamepad = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var lu = gamepad_axis_value(0, gp_axislv) &lt; 0;
var ld = gamepad_axis_value(0, gp_axislv) &gt; 0;

leftstick_up_pressed = lu &amp;&amp; !leftstick_up_held
leftstick_down_pressed = ld &amp;&amp; !leftstick_down_held;

leftstick_up_held = lu;
leftstick_down_held = ld;

left_held = false;
right_held = false;
jump_pressed = false;
jump_released = false;
attack_pressed = false;
dive_pressed = false;
up_pressed = false;
down_pressed = false;
confirm_pressed = false;
cancel_pressed = false;

left_held = 
    keyboard_check_direct(ds_map_find_value(keys, left)) || 
    gamepad_button_check(0, ds_map_find_value(buttons, left)) || 
    gamepad_axis_value(0, gp_axislh) &lt; 0;
right_held = 
    keyboard_check_direct(ds_map_find_value(keys, right)) || 
    gamepad_button_check(0, ds_map_find_value(buttons, right)) || 
    gamepad_axis_value(0, gp_axislh) &gt; 0;
jump_pressed = 
    keyboard_check_pressed(ds_map_find_value(keys, jump)) || 
    gamepad_button_check_pressed(0, ds_map_find_value(buttons, jump));
jump_released = 
    keyboard_check_released(ds_map_find_value(keys, jump)) || 
    gamepad_button_check_released(0, ds_map_find_value(buttons, jump));
attack_pressed = 
    keyboard_check_pressed(ds_map_find_value(keys, attack)) || 
    gamepad_button_check_pressed(0, ds_map_find_value(buttons, attack));
dive_pressed = 
    keyboard_check_pressed(ds_map_find_value(keys, dive)) || 
    gamepad_button_check_pressed(0, ds_map_find_value(buttons, dive));

up_pressed = 
    keyboard_check_pressed(vk_up) || 
    gamepad_button_check_pressed(0, gp_padu) ||
    leftstick_up_pressed;
down_pressed = 
    keyboard_check_pressed(vk_down) || 
    gamepad_button_check_pressed(0, gp_padd) ||
    leftstick_down_pressed;
confirm_pressed = 
    keyboard_check_pressed(ord('A')) || 
    gamepad_button_check_pressed(0, gp_face1);
cancel_pressed = 
    keyboard_check_pressed(vk_escape) || 
    gamepad_button_check_pressed(0, gp_start);
    
gamepad = scr_check_gamepad(gamepad);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//left_held = false;
//right_held = false;
jump_pressed = false;
jump_released = false;
attack_pressed = false;
dive_pressed = false;
up_pressed = false;
down_pressed = false;
confirm_pressed = false;
cancel_pressed = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
